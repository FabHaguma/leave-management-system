package com.ist.leavemanagementsystem.model;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDate;
import java.time.OffsetDateTime;

import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

@Entity
@Table(name = "leave_requests")
@Data // Added Lombok
@NoArgsConstructor // Added Lombok
public class LeaveRequest {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private Long userId;

    @Column(nullable = false)
    private Long leaveTypeId; // Assuming this is the ID of the leave type

    @Column(nullable = false)
    private LocalDate startDate;

    @Column(nullable = false)
    private LocalDate endDate;

    @Column(columnDefinition = "TEXT") // Map to TEXT type
    private String reason;

    @Column(columnDefinition = "TEXT") // Map to TEXT type
    private String comment;

    @Column(length = 50) // Map to VARCHAR(50)
    private String status; // e.g., "PENDING", "APPROVED", "REJECTED"

    @Column(name = "has_documents")
    private boolean hasDocuments;

    @CreationTimestamp
    @Column(name = "created_at", nullable = false, updatable = false, columnDefinition = "TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP")
    private OffsetDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "updated_at", nullable = false, columnDefinition = "TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP")
    private OffsetDateTime updatedAt;

    public int getDaysRequested() {
        return (int) (endDate.toEpochDay() - startDate.toEpochDay()) + 1; // +1 to include both start and end dates
    }

    // Getters and setters are generated by @Data
    // NoArgsConstructor is generated by @NoArgsConstructor
}